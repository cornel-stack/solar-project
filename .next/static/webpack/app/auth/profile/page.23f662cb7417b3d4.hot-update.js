"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/auth/profile/page",{

/***/ "(app-pages-browser)/./lib/api.ts":
/*!********************!*\
  !*** ./lib/api.ts ***!
  \********************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   api: function() { return /* binding */ api; }\n/* harmony export */ });\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\nclass ApiClient {\n    setAccessToken(token) {\n        this.accessToken = token;\n        if (true) {\n            if (token) {\n                localStorage.setItem(\"accessToken\", token);\n            } else {\n                localStorage.removeItem(\"accessToken\");\n            }\n        }\n    }\n    async request(endpoint) {\n        let config = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n        const url = \"\".concat(this.baseUrl).concat(endpoint);\n        const headers = {\n            \"Content-Type\": \"application/json\",\n            ...config.headers\n        };\n        if (this.accessToken) {\n            headers.Authorization = \"Bearer \".concat(this.accessToken);\n        }\n        const fetchConfig = {\n            method: config.method || \"GET\",\n            headers,\n            credentials: \"include\"\n        };\n        if (config.body && config.method !== \"GET\") {\n            fetchConfig.body = JSON.stringify(config.body);\n        }\n        try {\n            const response = await fetch(url, fetchConfig);\n            if (!response.ok) {\n                // Try to parse error response\n                try {\n                    const errorData = await response.json();\n                    throw new Error(errorData.error || \"HTTP \".concat(response.status));\n                } catch (e) {\n                    throw new Error(\"HTTP \".concat(response.status, \": \").concat(response.statusText));\n                }\n            }\n            const data = await response.json();\n            if (!data.success) {\n                throw new Error(data.error || \"API request failed\");\n            }\n            return data.data;\n        } catch (error) {\n            console.error(\"API request failed:\", error);\n            throw error;\n        }\n    }\n    // Auth endpoints\n    async register(data) {\n        const response = await this.request(\"/auth/register\", {\n            method: \"POST\",\n            body: data\n        });\n        if (response.accessToken) {\n            this.setAccessToken(response.accessToken);\n        }\n        return response;\n    }\n    async login(data) {\n        const response = await this.request(\"/auth/login\", {\n            method: \"POST\",\n            body: data\n        });\n        if (response.accessToken) {\n            this.setAccessToken(response.accessToken);\n        }\n        return response;\n    }\n    async logout() {\n        await this.request(\"/auth/logout\", {\n            method: \"POST\"\n        });\n        this.setAccessToken(null);\n    }\n    async refreshToken() {\n        try {\n            const response = await this.request(\"/auth/refresh\", {\n                method: \"POST\"\n            });\n            if (response.accessToken) {\n                this.setAccessToken(response.accessToken);\n            }\n            return response;\n        } catch (e) {\n            this.setAccessToken(null);\n            throw new Error(\"Session expired\");\n        }\n    }\n    async getProfile() {\n        return this.request(\"/auth/profile\");\n    }\n    async updateProfile(data) {\n        return this.request(\"/auth/profile\", {\n            method: \"PUT\",\n            body: data\n        });\n    }\n    // Calculator endpoints\n    async calculateSolarSystem(data) {\n        return this.request(\"/calculator/calculate\", {\n            method: \"POST\",\n            body: data\n        });\n    }\n    async getDeviceCatalog() {\n        return this.request(\"/calculator/devices\");\n    }\n    async getSunlightData(location) {\n        return this.request(\"/calculator/sunlight?location=\".concat(encodeURIComponent(location)));\n    }\n    // Plans endpoints\n    async createPlan(data) {\n        return this.request(\"/plans\", {\n            method: \"POST\",\n            body: data\n        });\n    }\n    async getUserPlans() {\n        let params = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n        const queryString = new URLSearchParams(Object.entries(params).filter((param)=>{\n            let [_, value] = param;\n            return value !== undefined;\n        }).map((param)=>{\n            let [key, value] = param;\n            return [\n                key,\n                String(value)\n            ];\n        })).toString();\n        return this.request(\"/plans\".concat(queryString ? \"?\".concat(queryString) : \"\"));\n    }\n    async getPlanById(id) {\n        return this.request(\"/plans/\".concat(id));\n    }\n    async updatePlan(id, data) {\n        return this.request(\"/plans/\".concat(id), {\n            method: \"PUT\",\n            body: data\n        });\n    }\n    async deletePlan(id) {\n        return this.request(\"/plans/\".concat(id), {\n            method: \"DELETE\"\n        });\n    }\n    async duplicatePlan(id, name) {\n        return this.request(\"/plans/\".concat(id, \"/duplicate\"), {\n            method: \"POST\",\n            body: {\n                name\n            }\n        });\n    }\n    async sharePlan(id) {\n        return this.request(\"/plans/\".concat(id, \"/share\"), {\n            method: \"POST\"\n        });\n    }\n    async getSharedPlan(token) {\n        return this.request(\"/plans/shared/\".concat(token));\n    }\n    // Health check\n    async healthCheck() {\n        return this.request(\"/health\");\n    }\n    constructor(){\n        this.accessToken = null;\n        this.baseUrl = process.env.NEXT_PUBLIC_API_URL || \"http://localhost:5001/api\";\n        // Load token from localStorage on client side\n        if (true) {\n            this.accessToken = localStorage.getItem(\"accessToken\");\n        }\n    }\n}\nconst api = new ApiClient();\n/* harmony default export */ __webpack_exports__[\"default\"] = (api);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/api.ts\n"));

/***/ })

});